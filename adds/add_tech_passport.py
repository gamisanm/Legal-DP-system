from bson.binary import Binary  # –ò–º–ø–æ—Ä—Ç –¥–ª—è Binary
import streamlit as st
from database import db

def add_tech_passport(config, cities):
    st.subheader("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞")
    
    with st.form("add_tech_form", clear_on_submit=True):
        values = {}
        
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞", type=["jpg", "png", "jpeg"])
        
        with st.container():
            col1, col2 = st.columns(2)
            
            for idx, (field, label, field_type) in enumerate(zip(config["fields"], config["labels"], config["types"])):
                current_col = col1 if idx % 2 == 0 else col2
                
                with current_col:
                    if field_type == "text":
                        values[field] = st.text_input(label, help=f"–í–≤–µ–¥–∏—Ç–µ {label.lower()}")
        
        submitted = st.form_submit_button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å")
        
        if submitted:
            if not uploaded_file:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞.")
                return
            
            empty_fields = [label for field, label, field_type in zip(config["fields"], config["labels"], config["types"]) 
                            if field_type == "text" and not values.get(field)]
            
            if empty_fields:
                st.error(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(empty_fields)}")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ Binary –≤ MongoDB
                values["photo"] = Binary(uploaded_file.getvalue())
                
                try:
                    db[config["collection_name"]].insert_one(values)
                    st.success("üéâ –§–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                    st.balloons()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {str(e)}")