from datetime import datetime
import streamlit as st
import os
from helpers import get_paginated_data, display_card
from database import db
from user_profile import display_profile  

def view_data(config, selected_city, cities):
    if "view_mode" not in st.session_state:
        st.session_state.view_mode = "list"

    if st.session_state.view_mode == "list":
        data = get_paginated_data(config, selected_city, context="view")
        if not data:
            st.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏.")
        else:
            st.subheader("üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π")
            with st.container():
                cols = st.columns(2)
                for idx, doc in enumerate(data):
                    with cols[idx % 2]:
                        display_card(doc, config)
                        if st.button("üëÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", key=f"view_profile_{str(doc['_id'])}"):
                            st.session_state.profile_doc = doc
                            st.session_state.view_mode = "profile"
                            st.rerun()

    elif st.session_state.view_mode == "profile" and "profile_doc" in st.session_state:
        display_profile(st.session_state.profile_doc, config, cities)
        if st.button("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.view_mode = "list"
            del st.session_state.profile_doc
            st.rerun()

def add_data(config, cities):
    st.subheader("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏")
    
    with st.form("add_form", clear_on_submit=True):
        values = {}
        
        with st.container():
            col1, col2 = st.columns(2)
            
            for idx, (field, label, field_type) in enumerate(zip(config["fields"], config["labels"], config["types"])):
                current_col = col1 if idx % 2 == 0 else col2
                
                with current_col:
                    if field_type == "text":
                        values[field] = st.text_input(label, help=f"–í–≤–µ–¥–∏—Ç–µ {label.lower()}")
                    elif field_type == "date":
                        values[field] = st.date_input(label, help=f"–í—ã–±–µ—Ä–∏—Ç–µ {label.lower()}")
                    elif field_type == "select" and field == "city":
                        values[field] = st.selectbox(label, cities[1:], help="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥")
        
        submitted = st.form_submit_button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
        
        if submitted:
            empty_fields = [label for field, label, field_type in zip(config["fields"], config["labels"], config["types"]) 
                            if field_type == "text" and not values.get(field)]
            
            if empty_fields:
                st.error(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(empty_fields)}")
            else:
                for i, field in enumerate(config["fields"]):
                    if config["types"][i] == "date" and values[field]:
                        values[field] = datetime.combine(values[field], datetime.min.time())
                
                try:
                    db[config["collection_name"]].insert_one(values)
                    st.success("üéâ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.balloons()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")

def add_tech_data(config):
    st.subheader("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞")
    
    with st.form("add_tech_form", clear_on_submit=True):
        values = {}
        
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞", type=["jpg", "png", "jpeg"])
        
        with st.container():
            col1, col2 = st.columns(2)
            
            for idx, (field, label, field_type) in enumerate(zip(config["fields"], config["labels"], config["types"])):
                current_col = col1 if idx % 2 == 0 else col2
                
                with current_col:
                    if field_type == "text":
                        values[field] = st.text_input(label, help=f"–í–≤–µ–¥–∏—Ç–µ {label.lower()}")
        
        submitted = st.form_submit_button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å")
        
        if submitted:
            if not uploaded_file:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞.")
                return
            
            empty_fields = [label for field, label, field_type in zip(config["fields"], config["labels"], config["types"]) 
                            if field_type == "text" and not values.get(field)]
            
            if empty_fields:
                st.error(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(empty_fields)}")
            else:
                os.makedirs("uploads", exist_ok=True)
                photo_path = f"uploads/{uploaded_file.name}"
                with open(photo_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                values["photo_path"] = photo_path
                
                try:
                    db[config["collection_name"]].insert_one(values)
                    st.success("üéâ –§–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                    st.balloons()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {str(e)}")

def view_tech_data(config):
    if "tech_view_mode" not in st.session_state:
        st.session_state.tech_view_mode = "list"

    if st.session_state.tech_view_mode == "list":
        data = get_paginated_data(config, None, context="tech_view")
        if not data:
            st.info("–ù–µ—Ç —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        else:
            st.subheader("üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ")
            with st.container():
                cols = st.columns(2)
                for idx, doc in enumerate(data):
                    with cols[idx % 2]:
                        display_card(doc, config)
                        if st.button("üëÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", key=f"tech_view_profile_{str(doc['_id'])}"):
                            st.session_state.tech_profile_doc = doc
                            st.session_state.tech_view_mode = "profile"
                            st.rerun()

    elif st.session_state.tech_view_mode == "profile" and "tech_profile_doc" in st.session_state:
        display_profile(st.session_state.tech_profile_doc, config)
        if st.button("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.tech_view_mode = "list"
            del st.session_state.tech_profile_doc
            st.rerun()